// Project Euler #12
// https://projecteuler.net/problem=12
//
/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <climits>

#include <cmath> // for 'sqrt()'

using namespace std;

inline int getDivisorCount(unsigned long long lp) {
    unsigned long long root_l = sqrtl(lp) + 1;
    int c = 0;
    for (unsigned long long l = 1; l <= root_l; l++)
        if ((lp % l) == 0) {
            if (lp / l == l) c += 1;
            else c += 2;
        }
    return c;
}

int main() {
    unsigned long long res = 0;

    for (unsigned long long l = 1; l != ULLONG_MAX; l++) {
        res += l;
        if (getDivisorCount(res) > 500) {
            break;
        }
    }

    cout << "Result: " << res << endl; // 76576500
}